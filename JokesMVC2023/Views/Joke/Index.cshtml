@model IEnumerable<JokesMVC2023.Models.Data.Joke>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <input type="button" class="btn btn-outline-danger" value="Update" onclick="startTimer()" />
</p>


<input type="button" value="Create Joke" class="btn btn-outline-primary" onclick="showCreateModal()" />

<div id="JokeTableContainer">
    <partial name="_JokeTable.cshtml" />
</div>



<div class="modal fade" id="createModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Create Joke</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="modalBody">
      </div>
    </div>
  </div>
</div>










<script>

    async function deleteConfirm(id){
        if(confirm("Delete Joke with ID: " + id + "?")){
            let result = await fetch('/Joke/Delete?id=' + id, {method: 'DELETE'});
            updateTable();
        }
    }


    /*
    * The method below will retrieve the rendered HTML for the Joke Table via a fetch request
    * The data within the response will be extracted as text.
    * This 'text' will then replace the 'innerHTML' of the container div
    */

    async function updateTable(){
        var result = await fetch("/Joke/JokeTablePartial");
        var htmlResult = await result.text();
        document.getElementById('JokeTableContainer').innerHTML = htmlResult;
    }

    async function showEditModal(id){
        let result = await fetch('/Joke/EditForm?id='+id);
        let htmlResult = await result.text();
        document.getElementById('modalBody').innerHTML = htmlResult;

        let form = document.querySelector("form[action='/Joke/Edit']")
        form.addEventListener('submit', async (e) => {handleEditSubmit(e, id)})

        $('#createModal').modal('show')
    }

    async function handleEditSubmit(e, id){
        e.preventDefault();

        console.log(id)

        let jokeEdit = {
            id: id,
            jokeQuestion: e.target["JokeQuestion"].value,
            jokeAnswer: e.target["JokeAnswer"].value
        }


        let form = e.target;
        let formResult = $(form);
        formResult.validate();
        console.log(formResult);

        let result = await fetch('/Joke/Edit?id='+ id, {
            method: 'PUT',
            headers: {
                'content-type': 'application/json'
            },
            body: JSON.stringify(jokeEdit)
        })
        console.log(result)

        $('#createModal').modal('hide')

        updateTable();


    }

    /*
    * The method below follows the same pattern as the 'updatedTable' method,
    * however, this also adds an event listener to the newly rendered form that allows for intercepting
    * the 'submit' event and posting the form data. This 'submit' handler should be extracted into a separate
    * method for readability
    */

    async function showCreateModal(){
        // Fetch the required partial view
        var result = await fetch("/Joke/Create");
        
        // convert the response into html
        var htmlResult = await result.text();

        // set the modal body to the returned html
        document.getElementById('modalBody').innerHTML = htmlResult;

        var form = document.querySelector("form[action='/Joke/Create']")

        form.addEventListener('submit', async (e) => {

            // Prevent the regular behavious of the form (stops it posting to the server)
            e.preventDefault();
            
            // TODO - validate the form
             
            let form = e.target;
            console.log(e.target)
            let formResult = $(form);
            console.log(formResult)
            let validationResult = formResult.validate();
            console.log(validationResult);

            // restructure the form data as a JSON object
            let jokeCreate = {
                JokeQuestion: e.target["JokeQuestion"].value,
                JokeAnswer: e.target["JokeAnswer"].value
            }
            
            // POST the JSON object (stringified) to the /Create endpoint
            let result = await fetch('/Joke/Create', {
                method: "POST",
                headers: {
                    "content-type": "application/json"
                },
                body: JSON.stringify(jokeCreate)
            });


            // Hide the Modal
            $('#createModal').modal('hide')

            updateTable();
        })

        // show the modal
        $('#createModal').modal('show')

    }

</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


